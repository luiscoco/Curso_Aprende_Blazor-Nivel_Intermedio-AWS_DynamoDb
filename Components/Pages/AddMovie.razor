@page "/add-movie"
@using DynamoDbBlazor.Data
@using DynamoDbBlazor.Services

@inject DynamoDbService DynamoDbService

<div class="container mt-4">
    <h3 class="text-primary mb-4">Add Movie</h3>

    <!-- Dropdown for selecting a DynamoDB table -->
    <div class="mb-3">
        <label for="tableSelect" class="form-label">Select Table:</label>
        @if (tables == null)
        {
            <div>Loading tables...</div>
        }
        else if (tables.Count == 0)
        {
            <div>No tables found in AWS DynamoDB.</div>
        }
        else
        {
            <select id="tableSelect" class="form-select" @bind="SelectedTable">
                <option value="">-- Select a table --</option>
                @foreach (var table in tables)
                {
                    <option value="@table">@table</option>
                }
            </select>
        }
    </div>

    <!-- Movie entry form -->
    @if (!string.IsNullOrEmpty(SelectedTable))
    {
        <EditForm Model="@newMovie" OnValidSubmit="@SubmitMovie" class="needs-validation">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <div class="mb-3">
                <label for="year" class="form-label">Year:</label>
                <InputNumber id="year" @bind-Value="newMovie.Year" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="newMovie.Title" class="form-control" />
            </div>

            <button type="submit" class="btn btn-success">Add Movie</button>
        </EditForm>
    }

    <!-- Success or error messages -->
    @if (isSuccess)
    {
        <div class="alert alert-success mt-3">Movie added successfully!</div>
    }
    @if (isError && !movieAlreadyExists)
    {
        <div class="alert alert-danger mt-3">Failed to add movie. Please try again later.</div>
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
    @if (movieAlreadyExists)
    {
        <div class="alert alert-warning mt-3">This movie already exists in the database.</div>
    }

    <!-- Display items from the selected table -->
    @if (itemsInTable != null && itemsInTable.Count > 0)
    {
        <h4 class="mt-4">Items in '@SelectedTable' Table:</h4>
        <ul class="list-group">
            @foreach (var item in itemsInTable)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Year: @item.Year, Title: @item.Title</span>
                    <button class="btn btn-danger btn-sm" @onclick="(() => DeleteMovie(item))">Delete</button>
                </li>
            }
        </ul>
    }
    else if (!string.IsNullOrEmpty(SelectedTable))
    {
        <div class="alert alert-info mt-3">No items found in the selected table.</div>
    }
</div>

@code {
    private Movie newMovie = new Movie();
    private bool isSuccess = false;
    private bool isError = false;
    private bool movieAlreadyExists = false;
    private string errorMessage = string.Empty;

    // Variables for listing and selecting tables
    private List<string> tables = new List<string>();
    private string selectedTable = "";

    // List to store items (movies) from the selected table
    private List<Movie> itemsInTable = new List<Movie>();

    protected override async Task OnInitializedAsync()
    {
        await LoadExistingTablesAsync();
    }

    private async Task LoadExistingTablesAsync()
    {
        try
        {
            // Load the list of DynamoDB tables from AWS
            tables = await DynamoDbService.ListTablesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tables: {ex.Message}";
            isError = true;
        }
    }

    // Load table items automatically when the SelectedTable value changes
    private string SelectedTable
    {
        get => selectedTable;
        set
        {
            if (selectedTable != value)
            {
                selectedTable = value;
                LoadTableItems().ConfigureAwait(false);
            }
        }
    }

    private async Task LoadTableItems()
    {
        Console.WriteLine($"Loading items from table: {selectedTable}");
        itemsInTable.Clear();
        if (!string.IsNullOrEmpty(selectedTable))
        {
            try
            {
                // Load the items (movies) from the selected table
                itemsInTable = await DynamoDbService.GetMoviesFromTableAsync(selectedTable);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error loading items from table '{selectedTable}': {ex.Message}";
                isError = true;
            }
        }
    }

    private async Task SubmitMovie()
    {
        // Clear previous flags and messages
        isSuccess = false;
        isError = false;
        movieAlreadyExists = false;
        errorMessage = string.Empty;

        // Ensure a table is selected
        if (string.IsNullOrEmpty(selectedTable))
        {
            isError = true;
            errorMessage = "Please select a DynamoDB table.";
            return;
        }

        try
        {
            // Try to add the movie using the selected DynamoDB table
            isSuccess = await DynamoDbService.AddMovieToTableAsync(newMovie, selectedTable);

            // If the movie was added successfully, refresh the items list
            if (isSuccess)
            {
                await LoadTableItems();
            }
            else
            {
                isError = true;
            }
        }
        catch (Amazon.DynamoDBv2.Model.ConditionalCheckFailedException)
        {
            // Handle the case where the movie already exists
            movieAlreadyExists = true;
        }
        catch (Exception ex)
        {
            // Capture the specific error message and display it
            errorMessage = ex.Message;
            isError = true;
        }
    }

    private async Task DeleteMovie(Movie movie)
    {
        try
        {
            bool success = await DynamoDbService.DeleteMovieAsync(movie, selectedTable);
            if (success)
            {
                // Remove the movie from the list if deleted successfully
                itemsInTable.Remove(movie);
                StateHasChanged();
            }
            else
            {
                errorMessage = $"Failed to delete movie: {movie.Title}.";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting movie '{movie.Title}': {ex.Message}";
            isError = true;
        }
    }
}
