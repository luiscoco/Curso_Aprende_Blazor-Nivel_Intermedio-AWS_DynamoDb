@page "/query-movies"

@using DynamoDbBlazor.Data
@using DynamoDbBlazor.Services
@inject DynamoDbService DynamoDbService

<div class="container mt-4">
    <h3 class="text-primary mb-4">Query Movies by Year</h3>

    <!-- Dropdown list for selecting a DynamoDB table -->
    <div class="mb-3">
        <label for="tableSelect" class="form-label">Select Table:</label>
        @if (tables == null)
        {
            <div>Loading tables...</div>
        }
        else if (tables.Count == 0)
        {
            <div>No tables found in AWS DynamoDB.</div>
        }
        else
        {
            <select id="tableSelect" class="form-select" @bind="tableName">
                <option value="">-- Select a table --</option>
                @foreach (var table in tables)
                {
                    <option value="@table">@table</option>
                }
            </select>
        }
    </div>

    <EditForm Model="@searchYear" OnValidSubmit="@QueryMoviesFunction" class="needs-validation">
        <div class="mb-3">
            <label for="year" class="form-label">Year:</label>
            <InputNumber id="year" @bind-Value="searchYear" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@string.IsNullOrEmpty(tableName)">Search</button>
    </EditForm>

    @if (moviesFound >= 0)
    {
        <div class="alert alert-info mt-3">Found @moviesFound movies from @searchYear in table @tableName.</div>
    }
</div>

@code {
    private int searchYear = 0;
    private int moviesFound = -1;
    private string tableName = ""; // Variable to store the selected table name
    private List<string> tables = new List<string>(); // To store the list of tables from AWS

    protected override async Task OnInitializedAsync()
    {
        await LoadExistingTablesAsync(); // Load tables when the component initializes
    }

    // Method to load existing DynamoDB tables
    private async Task LoadExistingTablesAsync()
    {
        try
        {
            tables = await DynamoDbService.ListTablesAsync(); // Get the list of tables from DynamoDB
        }
        catch (Exception ex)
        {
            // Handle error in loading tables
            Console.WriteLine($"Error loading tables: {ex.Message}");
        }
    }

    private async Task QueryMoviesFunction()
    {
        // Ensure the table name is provided
        if (string.IsNullOrEmpty(tableName))
        {
            moviesFound = -1;
            return;
        }

        // Pass the table name and search year to query the DynamoDB table
        moviesFound = await DynamoDbService.QueryMoviesAsync(searchYear, tableName);
    }
}
